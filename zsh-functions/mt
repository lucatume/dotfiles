#! /usr/bin/env bash

function mt-deep-clone(){
    git clone moderntribe/"$1" && (cd "$1" || exit 1; git submodule update --recursive --init)
}

function mt_sync_here(){
    cd app/public/wp-content/plugins && mt sync "$1"
}

function sq1_global_start(){
    (cd "${HOME}"/Repos/square-one/dev/docker/global || exit 1; sh ./start.sh)
}

function sq1_global_stop(){
    (cd "${HOME}"/Repos/square-one/dev/docker/global || exit 1; sh ./stop.sh)
}

function loxi_start(){
    sq1_global_start
    (cd "${HOME}"/Repos/calendar-saas/dev/docker || exit 1; sh ./start.sh; sh ./start-queue-worker.sh)
}

function loxi_error_log(){
    tail -f ~/Repos/calendar-saas/wp-content/debug.log
}

function loxi_start_and_build(){
    loxi_start
    loxi_build
}

function loxi_build(){
    (cd "${HOME}"/Repos/calendar-saas/dev/docker || exit 1; sh ./build.sh)
}

function loxi_stop(){
    (cd "${HOME}"/Repos/calendar-saas/dev/docker || exit 1; sh ./stop.sh)
    sq1_global_stop
}

function loxi_restart(){
    loxi_stop
    loxi_start
}

function loxi_logs(){
    (cd "${HOME}"/Repos/calendar-saas/dev/docker || exit 1; sh ./logs.sh)
}

function mtnpmbuild(){
		node_version=${1:-8.9.4}
		if [[ $(nodenv shell "${node_version}") -eq 0 ]]; then
				nodenv shell "${node_version}" && npm install && npm run build
		else
				echo "The commmand 'nodenv shell ${node_version}' terminated with error."
		fi
}

function mt_sync(){
		plugins=( "the-events-calendar/common" "the-events-calendar" "events-pro" "events-filterbar" "event-tickets" "event-tickets-plus" "events-community" )

		branch="${1:-master}"
		root="$(pwd)"

		if [ "${branch}" != "report" ]; then
				for plugin in "${plugins[@]}"; do
						echo "Checking out ${branch} on ${plugin}"
						cd "${root}/${plugin}" || echo "Could not cd to ${plugin}; does it exist?"
						git stash save --include-untracked "Update Stash"
						git checkout "${branch}"
						git pull
						git submodule update --recursive --init
						nodenv shell 8.9.4
						npm install
						npm run build
						git checkout .
				done
		fi

		cd "${root}" || (echo "Could not cd back to ${root}" && exit 1)

		echo ''
		echo 'Result:'
		echo '======='


		for plugin in "${plugins[@]}"; do
				echo ''
				cd "${root}/${plugin}" || (echo "Could not cd to ${plugin}" && exit 1)
				echo "${plugin} status: $(git status)"
		done
}

# If available add tric to the path.
test -d "${HOME}/Repos/products-test-automation/dev" && export PATH="${HOME}/Repos/products-test-automation/dev":"$PATH"
